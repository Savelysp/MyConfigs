#+TITLE: IF_mund's GNU Emacs Config
#+AUTHOR: Savelysp (IF_mund)
#+DESCRIPTION: IF_mund's personal Emacs config.
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el
#+STARTUP: content
#+OPTIONS: toc:2

* Base Settings
** Package management
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (require 'use-package)
  (setq use-package-always-ensure t))
#+end_src

** Base
#+begin_src emacs-lisp
(use-package emacs
  :config
  (setq
   ;; relative numbers
   display-line-numbers-type 'relative
   ;; safe themes
   custom-safe-themes t
   ;; Disable file backup
   make-backup-files nil
   ;; Disable scratch message
   initial-scratch-message nil
   ;; Disable startup message
   inhibit-startup-message t)

  (scroll-bar-mode -1)    ;; Disable visible scrollbar
  (tool-bar-mode -1)      ;; Disable toolbar
  (tooltip-mode -1)       ;; Disable tooltips
  (menu-bar-mode -1)      ;; Disable menu bar

  (set-fringe-mode 5)     ;; Change gap

  (global-hl-line-mode t) ;; Highlight current line

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Transparency
  (add-to-list 'default-frame-alist '(alpha-background . 90))

  ;; Font
  (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 120)

  ;; Line numbers
  (global-display-line-numbers-mode t)
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  org-mode-hook 
                  visual-fill-column-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; (setq treesit-language-source-alist
  ;;  '((python "https://github.com/tree-sitter/tree-sitter-python")
  ;;    (rust "https://github.com/tree-sitter/tree-sitter-rust")))
  
  ;; better scrolling experience
  (setq scroll-margin 20
        scroll-conservatively 101 ; > 100
        scroll-preserve-screen-position t
        auto-window-vscroll nil)

  (setq-default
   indicate-empty-lines t
   ;; Always use spaces for indentation
   indent-tabs-mode nil
   tab-width 4))
#+end_src

* Org
** Core org
#+begin_src emacs-lisp
(use-package org
  :hook
  (org-mode . org-indent-mode)
  (org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode) 
  :config
  ;; fix pitch
  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit fixed-pitch))))
   '(org-table ((t (:inherit fixed-pitch )))))

  ;; headers size
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
   '(org-level-6 ((t (:inherit outline-5 :height 1.1))))
   '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))

  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; org tempo
  (require 'org-tempo)
  (setq org-structure-template-alist
        '(("el"   . "src emacs-lisp")
          ("sh"   . "src shell")
          ("lua"  . "src lua")
          ("hs"   . "src haskell")
          ("jv"   . "src java")
          ("cc"   . "src C")
          ("sql"  . "src SQL")
          ("toml" . "src toml")
          ("yml"  . "src yaml")
          ("py"   . "src python")))

  ;; todo keywords
  ;; (setq org-todo-keywords
  ;;     '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
  ;;       (sequence "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  ;; open links
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

  ;; habit
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)

  ;;agenda
  (global-set-key (kbd "C-c o a") #'org-agenda)
  (setq org-agenda-custom-commands
        '(("d" "Daily Agenda"
           ((agenda "" ((org-agenda-span 'day)))))))

  ;; other
  (setq org-ellipsis " ▾"
        org-log-done 'time
        org-src-preserve-indentation t
        org-hide-emphasis-markers t))
#+end_src

** Org Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Visual fill column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . visual-fill-column-mode)
    :config
    (setq-default visual-fill-column-width 150
                  visual-fill-column-center-text t))
#+end_src

** Org roam
#+begin_src emacs-lisp
(use-package org-roam
  :custom
  (org-roam-directory "~/RoamNotes")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates

   '(("d" "default"
      plain "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("m" "Map"
      plain (file "~/RoamNotes/Templates/MapNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("e" "Ephemeral"
      plain (file "~/RoamNotes/Templates/EphemeralNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("p" "Project"
      plain (file "~/RoamNotes/Templates/ProjectNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}/n#+category: ${title}\n#+date: %U")
      :unnarrowed t)
     ("c" "Concept"
      plain (file "~/RoamNotes/Templates/ConceptNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("w" "Framework"
      plain (file "~/RoamNotes/Templates/FrameworkNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("v" "VariableTag"
      plain (file "~/RoamNotes/Templates/VariableTagNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("l" "Language"
      plain (file "~/RoamNotes/Templates/LanguageNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("t" "Tool"
      plain (file "~/RoamNotes/Templates/ToolNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("f" "Fact"
      plain (file "~/RoamNotes/Templates/FactNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)
     ("b" "Book note"
      plain (file "~/RoamNotes/Templates/BookNoteTemplate.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U")
      :unnarrowed t)))

  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i"   . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (setq org-roam-node-display-template "${title:100} ${tags:100}")
  (require 'org-roam-dailies)
  (org-roam-setup))
#+end_src

** Org roam ui
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src

** Org agenda
#+begin_src emacs-lisp
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)

(defun my/org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
          '(("t" "tasks" entry "%?"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Tasks" today-file nil pos)))))

(add-to-list 'org-after-todo-state-change-hook
             (lambda ()
               (when (equal org-state "DONE")
                 (my/org-roam-copy-todo-to-today))))
#+end_src

** Org brain
* Editor
** Evil
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq
   evil-want-C-i-jump nil
   evil-want-integration t
   evil-want-keybinding nil)
  :config
  (evil-mode))

;; (use-package evil-lion
;;   :config
;;   (evil-lion-mode))

(use-package evil-surround
  :config
  (global-evil-surround-mode 1))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** Commenter
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file))
#+end_src

** Electric
** snippets
** Multiple cursors
* UI
** Theme
*** Doom Themes
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; (load-theme 'doom-material t))
  ;; (load-theme 'doom-nord t))
  ;; (load-theme 'doom-tokyo-night t))
  ;; (load-theme 'doom-gruvbox t))
  ;; (load-theme 'doom-solarized-dark t))
  ;; (load-theme 'doom-dracula t))
  ;; (load-theme 'doom-one t))
  (load-theme 'doom-monokai-pro t))
#+end_src

*** Solaire mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :init
  (solaire-global-mode))
#+end_src

*** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook org-mode prog-mode)
#+end_src

*** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** Indent guides
#+begin_src emacs-lisp
;; (use-package indent-bars
;;   :hook (python-mode . indent-bars-mode))
#+end_src

*** hl todo
#+begin_src emacs-lisp
(use-package hl-todo
  :hook (org-mode . hl-todo-mode)
  :config
  (setq hl-todo-keyword-faces
      '(("TODO"   . "#c897ff")
        ("PAUSED" . "#68cee8")
        ("REVIEW" . "#89e14b")
        ("FIXME"  . "#e81050"))))
#+end_src

*** Ophints
** Dashboard (Enlight)
#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-center-content nil)
  (setq dashboard-startup-banner 1)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 3)
                          (agenda . 5)
                          (projects . 3)))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (doom-modeline-mode t))
#+end_src

** Helpfull
#+begin_src emacs-lisp
(use-package helpful)
#+end_src

** Command log
#+begin_src emacs-lisp
;; (use-package command-log-mode)
#+end_src

** Popup
** Snow
#+begin_src emacs-lisp
(use-package snow)
#+end_src

* Keybinds
** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode))
#+end_src

** General
#+begin_src emacs-lisp
(use-package general
  :after evil
  :config
  (general-evil-setup)
  (general-create-definer rune/leader-keys
    :keymaps '(normal emacs)
    :prefix "SPC")
  
  (rune/leader-keys
    ;; roam keys
    "r" '(:ignore t :which-key "roam")
    "ri" '(org-roam-node-insert :which-key "insert")
    "rf" '(org-roam-node-find :which-key "find")
    "ru" '(org-roam-ui-mode :which-key "graph")
    "rd" '(:ignore t :which-key "daily")

    ;; leaving emacs
    "q" '(:ignore t :which-key "leaving")
    "qr" '(restart-emacs t :which-key "restart")
    "qq" '(kill-emacs t :which-key "quit")
    "qc" '(save-buffers-kill-terminal t :which-key "close")

    ;; files
    "f" '(:ignore t :which-key "files")
    "ff" '(find-file :which-key "find file")
    "fs" '(save-buffer :which-key "save file")

    ;; window management
    "w" '(:ignore t :which-key "windows")

    ;; dired
    "d" '(:ignore t :which-key "dired")

    ;; help
    "h" '(:ignore t :which-key "help")

    ;; git
    "g" '(:ignore t :which-key "git")

    ;; org
    "m" '(:ignore t :which-key "org")
    "ml" '(org-babel-tangle :which-key "tangle")
    "ms" '(org-schedule :which-key "schedule")
    "md" '(org-deadline :which-key "deadline")
    "mt" '(org-todo :which-key "todo")
    "ma" '(org-agenda :which-key "agenda")

    ;; buffers
    "b" '(:ignore t :which-key "buffers")

    ;; lsp
    "l" '(:ignore t :which-key "lsp")

    ;; toggle
    "t" '(:ignore t :which-key "toggle")

    ;; other
    "c" '(consult-theme :which-key "choose theme")
    "." '(find-file :which-key "find file")
    "," '(consult-buffer :which-key "choose buffer")))
#+end_src

* Completion
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :bind (:map vertico-map
              ("C-j" . vertico-next)
              ("C-k" . vertico-previous)
              ("C-h" . vertico-directory-up)
              ("C-l" . vertico-directory-enter))
  :config
  (setq vertico-cycle t)
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))

(use-package marginalia
  :after vertico
  :init
  (marginalia-mode))

(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package consult
  :bind
  ("C-x b" . consult-buffer))
#+end_src

** PAUSED Corfu
#+begin_src emacs-lisp
;; (use-package corfu
;;   :custom
;;   (corfu-cycle t)                
;;   (corfu-auto t)
;;   (corfu-auto-prefix 2)
;;   (corfu-auto-delay 0.1)
;;   :init
;;   (global-corfu-mode))
#+end_src

* Tools
** PAUSED Projectile
#+begin_src emacs-lisp
;; (use-package projectile
;;   :bind (
;;          :map projectile-mode-map
;;          ("C-c p" . projectile-command-map))
;;   :init
;;   (setq projectile-project-search-path '("~/projects/"))
;;   (projectile-mode))
#+end_src

** PAUSED LSP
#+begin_src emacs-lisp
;; (use-package lsp-mode
;;   :init
;;   ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
;;   (setq lsp-keymap-prefix "C-c l")
;;   :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
;;          (python-ts-mode . lsp)
;;          ;; if you want which-key integration
;;          (lsp-mode . lsp-enable-which-key-integration))
;;   :commands lsp)

;; ;; optionally
;; (use-package lsp-ui :commands lsp-ui-mode)
;; (use-package consult-lsp)

;; ;; optionally if you want to use debugger
;; (use-package dap-mode)
;; ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src

** PAUSED Syntax check
#+begin_src emacs-lisp
;; (use-package flycheck
;;   :init (global-flycheck-mode))
#+end_src

** PAUSED Lookup
** PAUSED Debugger
** PAUSED Magit
** PAUSED Vterm
* Langs
** PAUSED Python
#+begin_src emacs-lisp
;; (use-package python-mode
;;   :hook (python-mode . python-ts-mode))

;; (use-package pyvenv
;;   :hook (python-ts-mode . pyvenv-mode))

;; (use-package lsp-pyright
;;   :ensure t
;;   :custom (lsp-pyright-langserver-command "pyright") ;; or basedpyright
;;   :hook (python-ts-mode . (lambda ()
;;                           (require 'lsp-pyright)
;;                           (lsp))))  ; or lsp-deferred
#+end_src

** Lua
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

** TOML
#+begin_src emacs-lisp
(use-package toml-mode)
#+end_src

** YAML
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src
