#+TITLE: IF_mund's Neovim Config
#+AUTHOR: Savelysp (IF_mund)
#+DESCRIPTION: IF_mund's personal Neovim config.
#+STARTUP: content

* INIT
#+begin_src lua :tangle ~/.config/nvim/init.lua
  require("core.base")
  require("core.keymaps")
  require("core.lazy_setup")

  require("plugins.bufferline")
  require("plugins.cellular_automaton")
  require("plugins.cmp")
  require("plugins.dashboard")
  require("plugins.indent_blankline")
  require("plugins.lsp")
  require("plugins.lualine")
  require("plugins.mason")
  -- require("plugins.mini")
  require("plugins.nvim_tree")
  require("plugins.telescope")
  -- require("plugins.sonokai")
  require("plugins.treesitter")
  require("plugins.which_key")
#+end_src 

* Base
** Кодировка UTF-8
#+begin_src lua :tangle ~/.config/nvim/lua/core/base.lua
  vim.opt.encoding = "utf-8"
#+end_src 

** Настройки поиска
#+begin_src lua :tangle ~/.config/nvim/lua/core/base.lua
  vim.opt.ignorecase = true
  vim.opt.smartcase = true
  vim.opt.hlsearch = true
  vim.opt.incsearch = true
#+end_src 

** Настройки отступов
#+begin_src lua :tangle ~/.config/nvim/lua/core/base.lua
  vim.opt.tabstop = 4
  vim.opt.softtabstop = 4
  vim.opt.shiftwidth = 4
  vim.opt.expandtab = true
  vim.opt.smarttab = true
  vim.opt.autoindent = true
  vim.opt.smartindent = true
  vim.opt.cindent = true
  -- vim.g.pyindent_open_paren = vim.bo.shiftwidth
#+end_src 

** Номера строк
#+begin_src lua :tangle ~/.config/nvim/lua/core/base.lua
  vim.opt.number = true
  vim.opt.relativenumber = true
  -- vim.wo.number = true
  -- vim.wo.relativenumber = true
#+end_src 

** Мышь
#+begin_src lua :tangle ~/.config/nvim/lua/core/base.lua
  vim.opt.mouse = "a"
  vim.opt.mousefocus = true
#+end_src 

** Буфер обмена
#+begin_src lua :tangle ~/.config/nvim/lua/core/base.lua
  vim.opt.clipboard = "unnamedplus"
#+end_src 

** Скролл
#+begin_src lua :tangle ~/.config/nvim/lua/core/base.lua
  vim.opt.so = 30
#+end_src 

* Keymaps
** Префикс
#+begin_src lua :tangle ~/.config/nvim/lua/core/keymaps.lua
  vim.g.mapleader = " "
#+end_src 

** Убрать выделение
#+begin_src lua :tangle ~/.config/nvim/lua/core/keymaps.lua
  vim.keymap.set('n', '<Esc>', '<cmd>nohlsearch<CR>')
#+end_src 

** Дерево
#+begin_src lua :tangle ~/.config/nvim/lua/core/keymaps.lua
  vim.keymap.set('n', '<leader>t', ':NvimTreeToggle<CR>')
  vim.keymap.set('n', '<leader>tf', ':NvimTreeFocus<CR>')
#+end_src 

** Буферы
#+begin_src lua :tangle ~/.config/nvim/lua/core/keymaps.lua
  vim.keymap.set('n','<Tab>', ':BufferLineCycleNext<CR>')
  vim.keymap.set('n','<S-Tab>', ':BufferLineCyclePrev<CR>')
  vim.keymap.set('n', '<C-l>', ':BufferLineCloseOthers<CR>')
#+end_src 

** TodoList
#+begin_src lua :tangle ~/.config/nvim/lua/core/keymaps.lua
  vim.keymap.set('n', '<leader>nl', ':TodoTelescope<CR>')
#+end_src 

** Открыть терминал
#+begin_src lua :tangle ~/.config/nvim/lua/core/keymaps.lua
  -- vim.keymap.set('n', '<leader>s', ':ToggleTerm')
#+end_src

** (удалить)Telescope
#+begin_src lua
  -- Настраиваем комбинации под разные функции
  -- local builtin = require('telescope.builtin')

  -- Работа с файлами и буфферами
  -- vim.keymap.set('n', '<leader>ff', telescope.builtin.find_files, {})
  -- vim.keymap.set('n', '<leader>ft', telescope.builtin.live_grep, {})
  -- vim.keymap.set('n', '<leader>fb', telescope.builtin.buffers, {})
  -- vim.keymap.set('n', '<leader>fh', telescope.builtin.help_tags, {})

  -- Работа с Git
  -- vim.keymap.set('n', '<leader>gb', telescope.builtin.git_branches, {})
  -- vim.keymap.set('n', '<leader>gc', telescope.builtin.git_commits, {})
  -- vim.keymap.set('n', '<leader>gs', telescope.builtin.git_status, {})

  -- Выбор цветовой схемы
  -- vim.keymap.set('n', '<leader>cs', telescope.builtin.colorscheme, {})
#+end_src

** (удалить)LSP
#+begin_src lua
  -- -- Global mappings.
  -- -- See `:help vim.diagnostic.*` for documentation on any of the below functions
  -- vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
  -- vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
  -- -- vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)
  -- vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
  
  -- -- Use LspAttach autocommand to only map the following keys
  -- -- after the language server attaches to the current buffer
  -- vim.api.nvim_create_autocmd('LspAttach', {
  --   group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  --   callback = function(ev)
  --     -- Enable completion triggered by <c-x><c-o>
  --     vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'
  
  --     -- Buffer local mappings.
  --     -- See `:help vim.lsp.*` for documentation on any of the below functions
  --     local opts = { buffer = ev.buf }
  --     vim.keymap.set('n', 'lD', vim.lsp.buf.declaration, opts)
  --     vim.keymap.set('n', 'ld', vim.lsp.buf.definition, opts)
  --     vim.keymap.set('n', 'lk', vim.lsp.buf.hover, opts)
  --     -- vim.keymap.set('n', 'lm', vim.lsp.buf.implementation, opts)
  --     -- vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
      
  --     -- vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
  --     -- vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
  --     -- vim.keymap.set('n', '<space>wl', function()
  --     --   print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  --     -- end, opts)
      
  --     -- TODO: Используется повторно, необходимо вырезать в след.версии
  --     -- vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
  --     vim.keymap.set({ 'n', 'v' }, '<space>r', vim.lsp.buf.code_action, opts)
  --     vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
  --     vim.keymap.set('n', '<space>f', function()
  --       vim.lsp.buf.format { async = true }
  --     end, opts)
  --   end,
  -- })
#+end_src

* Lazy
** Setup
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  -- Bootstrap lazy.nvim
  local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
  if not (vim.uv or vim.loop).fs_stat(lazypath) then
     local lazyrepo = "https://github.com/folke/lazy.nvim.git"
     local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
     if vim.v.shell_error ~= 0 then
        vim.api.nvim_echo({
              { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
              { out, "WarningMsg" },
              { "\nPress any key to exit..." },
        }, true, {})
        vim.fn.getchar()
        os.exit(1)
     end
  end
  vim.opt.rtp:prepend(lazypath)

  -- Make sure to setup `mapleader` and `maplocalleader` before
  -- loading lazy.nvim so that mappings are correct.
  -- This is also a good place to setup other settings (vim.opt)
  vim.g.mapleader = " "
  vim.g.maplocalleader = "\\"

  -- Setup lazy.nvim
  require("lazy").setup({
      
#+end_src

** Pugins_list
*** (Optional) Ale
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** (Optional) Auto save
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** (Optional) Better escape
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** Bufferline
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     'akinsho/bufferline.nvim', version = "*", 
     dependencies = 'nvim-tree/nvim-web-devicons'
  },
#+end_src

*** Cellular automaton
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     'Eandrju/cellular-automaton.nvim'
  },
#+end_src

*** CMP
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  { 
     'hrsh7th/cmp-nvim-lsp'
  },
  {
     'hrsh7th/cmp-buffer'
  },
  {
     'hrsh7th/cmp-path'
  },
  {
     'hrsh7th/cmp-cmdline'
  },
  {
     'hrsh7th/nvim-cmp'
  },
  -- TODO: snips
#+end_src

*** Comment
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     'numToStr/Comment.nvim',
     -- opts = {}
  },
#+end_src

*** Dashboard (можно заменить на alpha)
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     'nvimdev/dashboard-nvim',
     event = 'VimEnter',
     dependencies = {{'nvim-tree/nvim-web-devicons'}}
  },
#+end_src

*** (Optional) Dressing
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** (Optional) Gitsigns
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** Indent blankline
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "lukas-reineke/indent-blankline.nvim",
     main = "ibl",
     ---@module "ibl"
     ---@type ibl.config
     -- opts = {},
  },
#+end_src

*** LSP & Mason
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "williamboman/mason.nvim",
     "williamboman/mason-lspconfig.nvim",
     "neovim/nvim-lspconfig",
  },
#+end_src

*** Lualine
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     'nvim-lualine/lualine.nvim',
     dependencies = { 'nvim-tree/nvim-web-devicons' }
  },
#+end_src

*** (Optional)Luarocks
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** TODO Luasnip (Можно добавить Friendly Snippets)
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** Mini (можно часть заменить на autopairs)
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     'echasnovski/mini.nvim', version = false 
  },
  { 
     'echasnovski/mini.move', version = false 
  },
  { 
     'echasnovski/mini.pairs', version = false 
  },
#+end_src

*** TODO Multicursors

*** Nvim colorizer
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  { 
     'norcalli/nvim-colorizer.lua' 
  },
#+end_src

*** TODO Nvim surround
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** Nvim tree
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "nvim-tree/nvim-tree.lua",
     version = "*",
     lazy = false,
     dependencies = {
        "nvim-tree/nvim-web-devicons",
     },
  },
#+end_src

*** (Optional)Oil
#+begin_src lua

#+end_src

*** Telescope
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     'nvim-telescope/telescope.nvim', tag = '0.1.8',
     -- or                          , branch = '0.1.x',
     dependencies = { 'nvim-lua/plenary.nvim' }
  },
#+end_src

*** Themes
**** Catppuccin
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "catppuccin/nvim", name = "catppuccin", priority = 1000 
  },
#+end_src

**** Gruvbox
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "ellisonleao/gruvbox.nvim", priority = 1000 , -- config = true, opts = ...
  },
#+end_src

**** Nightfox
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "EdenEast/nightfox.nvim" 
  },
#+end_src

**** Tokyonight
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "folke/tokyonight.nvim",
     lazy = false,
     priority = 1000,
     -- opts = {},
  },
#+end_src

**** Sonokai
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     'sainnhe/sonokai',
     lazy = false,
     priority = 1000,
     config = function()
        vim.g.sonokai_style = 'espresso'
        vim.g.sonokai_transparent_background = 1
        vim.g.sonokai_enable_italic = true
        vim.cmd.colorscheme('sonokai')
     end
  },
#+end_src

*** Todo comments
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "folke/todo-comments.nvim",
     dependencies = { "nvim-lua/plenary.nvim" },
     -- opts = {}
  },
#+end_src

*** (Optional)Toggleterm
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** Treesitter
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "nvim-treesitter/nvim-treesitter",
  },
#+end_src

*** (Optional)Trouble
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua

#+end_src

*** Which key
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  {
     "folke/which-key.nvim",
     event = "VeryLazy",
     -- opts = {icons = {mappings = false}},
  },
#+end_src

** Закрывающая скобка
#+begin_src lua :tangle ~/.config/nvim/lua/core/lazy_setup.lua
  })
#+end_src

* Plugin configs
** TODO Bufferline
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/bufferline.lua
  require("bufferline").setup {}
#+end_src

** Cellular automaton
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/cellular_automaton.lua
  local config = {
     fps = 50,
     name = 'slide',
  }

  -- update function
  config.update = function (grid)
     for i = 1, #grid do
        local prev = grid[i][#(grid[i])]
        for j = 1, #(grid[i]) do
           grid[i][j], prev = prev, grid[i][j]
        end
     end
     return true
  end

  require("cellular-automaton").register_animation(config)
#+end_src

** TODO CMP
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/cmp.lua
  local cmp = require 'cmp'
  
  cmp.setup({
      snippet = {
          -- REQUIRED - you must specify a snippet engine
          expand = function(args)
              -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
              -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
              -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
              -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
          end
  
      },
      window = {
          completion = cmp.config.window.bordered(),
          documentation = cmp.config.window.bordered()
      },
      mapping = cmp.mapping.preset.insert({
          ['<C-b>'] = cmp.mapping.scroll_docs(-4),
          ['<C-f>'] = cmp.mapping.scroll_docs(4),
          ['<C-Space>'] = cmp.mapping.complete(),
          ['<C-e>'] = cmp.mapping.abort(),
          ['<CR>'] = cmp.mapping.confirm({select = true}),
          ["<Tab>"] = cmp.mapping(function(fallback)
              if cmp.visible() then
                  cmp.select_next_item()
              else
                  fallback()
              end
          end, {"i", "s"}),
          ["<S-Tab>"] = cmp.mapping(function(fallback)
              if cmp.visible() then
                  cmp.select_prev_item()
              else
                  fallback()
              end
          end, {"i", "s"})
      }),
      sources = cmp.config.sources({
          {name = 'nvim_lsp'}, {name = 'vsnip'} -- For vsnip users.
      }, {{name = 'buffer'}, {name = 'nvim_lsp_signature_help'}})
  })
  
  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
      sources = cmp.config.sources({
          {name = 'cmp_git'} -- You can specify the `cmp_git` source if you were installed it.
      }, {{name = 'buffer'}})
  })
  
  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({'/', '?'}, {
      mapping = cmp.mapping.preset.cmdline(),
      sources = {{name = 'buffer'}}
  })
  
  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
      mapping = cmp.mapping.preset.cmdline(),
      sources = cmp.config.sources({{name = 'path'}}, {{name = 'cmdline'}})
  })
  
  -- Set up lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  require('lspconfig')['ts_ls'].setup {capabilities = capabilities}
  
#+end_src

** TODO Dashboard
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/dashboard.lua
  local function default_header()
     return {
        '', '', '',        
        '██╗███████╗██╗   ██╗██╗███╗   ███╗',
        '██║██╔════╝██║   ██║██║████╗ ████║',
        '██║█████╗  ██║   ██║██║██╔████╔██║',
        '██║██╔══╝  ╚██╗ ██╔╝██║██║╚██╔╝██║',
        '██║██║      ╚████╔╝ ██║██║ ╚═╝ ██║',
        '╚═╝╚═╝       ╚═══╝  ╚═╝╚═╝     ╚═╝',
        '', '', ''
     }
  end

  require('dashboard').setup {
     theme = 'doom',
     config = {
        header = default_header(),
        center = {
           {
              icon = '󰈞 ',
              icon_hl = 'Title',
              desc = 'Find files',
              desc_hl = 'String',
              key = 'f',
              keymap = 'SPC f f',
              key_hl = 'Number',
              action = ':Telescope find_files'
           }, {
              icon = '󰱾 ',
              icon_hl = 'Title',
              desc = 'Open recently',
              desc_hl = 'String',
              key = 'r',
              keymap = 'SPC f r',
              key_hl = 'Number',
              action = ':Telescope oldfiles'
              }, {
              icon = ' ',
              icon_hl = 'Title',
              desc = 'Find text',
              desc_hl = 'String',
              key = 'w',
              keymap = 'SPC f w',
              key_hl = 'Number',
              action = ':Telescope live_grep'
                 }, {
              icon = ' ',
              icon_hl = 'Title',
              desc = 'Git Braches',
              desc_hl = 'String',
              key = 'b',
              keymap = 'SPC g b',
              key_hl = 'Number',
              action = ':Telescope git_branches'
           }

        }
     }
  }
#+end_src

** Indent blankline
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/indent_blankline.lua
  require('ibl').setup {
  -- opts = {
     indent = { char = "│" }, 
     scope = { enabled = false },
     -- node_type = { '*' = { "source_file" } },
     exclude = {
        filetypes = {
           "dashboard",
        },
     },
  -- }
  }
#+end_src

** TODO LSP
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/lsp.lua
  -- Setup language servers.
  local lspconfig = require('lspconfig')
  lspconfig.pyright.setup {
      settings = {
          pyright = {
            -- Using Ruff's import organizer
            disableOrganizeImports = true,
          },
          python = {
            analysis = {
              -- Ignore all files for analysis to exclusively use Ruff for linting
              ignore = { '*' },
              },
          },
      },	
  }

  lspconfig.ts_ls.setup {}

  -- lspconfig.hls.setup{}

  lspconfig.rust_analyzer.setup {
    -- Server-specific settings. See `:help lspconfig-setup`
    settings = {
      ['rust-analyzer'] = {},
    },
  }

  lspconfig.ruff.setup {
    init_options = {
      settings = {
        -- Any extra CLI arguments for `ruff` go here.
        args = {
          "--select=E,F,UP,N,I,ASYNC,S,PTH",
          "--line-length=79",
          "--respect-gitignore",  -- Исключать из сканирования файлы в .gitignore
          "--target-version=py311"
        },
      }
    }
  }

  -- Global mappings.
  -- See `:help vim.diagnostic.*` for documentation on any of the below functions
  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
  -- vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
  
  -- Use LspAttach autocommand to only map the following keys
  -- after the language server attaches to the current buffer
  vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
      -- Enable completion triggered by <c-x><c-o>
      vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'
  
      -- Buffer local mappings.
      -- See `:help vim.lsp.*` for documentation on any of the below functions
      local opts = { buffer = ev.buf }
      vim.keymap.set('n', 'lD', vim.lsp.buf.declaration, opts)
      vim.keymap.set('n', 'ld', vim.lsp.buf.definition, opts)
      vim.keymap.set('n', 'lk', vim.lsp.buf.hover, opts)
      -- vim.keymap.set('n', 'lm', vim.lsp.buf.implementation, opts)
      -- vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
      
      -- vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
      -- vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
      -- vim.keymap.set('n', '<space>wl', function()
      --   print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
      -- end, opts)
      
      -- TODO: Используется повторно, необходимо вырезать в след.версии
      -- vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
      vim.keymap.set({ 'n', 'v' }, '<space>r', vim.lsp.buf.code_action, opts)
      vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
      vim.keymap.set('n', '<space>f', function()
        vim.lsp.buf.format { async = true }
      end, opts)
    end,
  })
#+end_src

** TODO Lualine
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/lualine.lua
  -- Eviline config for lualine
  -- Author: shadmansaleh
  -- Credit: glepnir
  local lualine = require('lualine')

  -- Color table for highlights
  -- stylua: ignore
  local colors = {
     bg       = '#202328',
     fg       = '#bbc2cf',
     yellow   = '#ECBE7B',
     cyan     = '#008080',
     darkblue = '#081633',
     green    = '#98be65',
     orange   = '#FF8800',
     violet   = '#a9a1e1',
     magenta  = '#c678dd',
     blue     = '#51afef',
     red      = '#ec5f67',
  }

  local conditions = {
     buffer_not_empty = function()
        return vim.fn.empty(vim.fn.expand('%:t')) ~= 1
     end,
     hide_in_width = function()
        return vim.fn.winwidth(0) > 80
     end,
     check_git_workspace = function()
        local filepath = vim.fn.expand('%:p:h')
        local gitdir = vim.fn.finddir('.git', filepath .. ';')
        return gitdir and #gitdir > 0 and #gitdir < #filepath
     end,
  }

  -- Config
  local config = {
     options = {
        -- Disable sections and component separators
        component_separators = '',
        section_separators = '',
        theme = {
           -- We are going to use lualine_c an lualine_x as left and
           -- right section. Both are highlighted by c theme .  So we
           -- are just setting default looks o statusline
           normal = { c = { fg = colors.fg, bg = colors.bg } },
           inactive = { c = { fg = colors.fg, bg = colors.bg } },
        },
     },
     sections = {
        -- these are to remove the defaults
        lualine_a = {},
        lualine_b = {},
        lualine_y = {},
        lualine_z = {},
        -- These will be filled later
        lualine_c = {},
        lualine_x = {},
     },
     inactive_sections = {
        -- these are to remove the defaults
        lualine_a = {},
        lualine_b = {},
        lualine_y = {},
        lualine_z = {},
        lualine_c = {},
        lualine_x = {},
     },
  }

  -- Inserts a component in lualine_c at left section
  local function ins_left(component)
     table.insert(config.sections.lualine_c, component)
  end

  -- Inserts a component in lualine_x at right section
  local function ins_right(component)
     table.insert(config.sections.lualine_x, component)
  end

  ins_left {
     function()
        return '▊'
     end,
     color = { fg = colors.blue }, -- Sets highlighting of component
     padding = { left = 0, right = 1 }, -- We don't need space before this
  }

  ins_left {
     -- mode component
     function()
        return ''
     end,
     color = function()
        -- auto change color according to neovims mode
        local mode_color = {
           n = colors.red,
           i = colors.green,
           v = colors.blue,
           [''] = colors.blue,
           V = colors.blue,
           c = colors.magenta,
           no = colors.red,
           s = colors.orange,
           S = colors.orange,
           [''] = colors.orange,
           ic = colors.yellow,
           R = colors.violet,
           Rv = colors.violet,
           cv = colors.red,
           ce = colors.red,
           r = colors.cyan,
           rm = colors.cyan,
           ['r?'] = colors.cyan,
           ['!'] = colors.red,
           t = colors.red,
        }
        return { fg = mode_color[vim.fn.mode()] }
     end,
     padding = { right = 1 },
  }

  ins_left {
     -- filesize component
     'filesize',
     cond = conditions.buffer_not_empty,
  }

  ins_left {
     'filename',
     cond = conditions.buffer_not_empty,
     color = { fg = colors.magenta, gui = 'bold' },
  }

  ins_left { 'location' }

  ins_left { 'progress', color = { fg = colors.fg, gui = 'bold' } }

  ins_left {
     'diagnostics',
     sources = { 'nvim_diagnostic' },
     symbols = { error = ' ', warn = ' ', info = ' ' },
     diagnostics_color = {
        color_error = { fg = colors.red },
        color_warn = { fg = colors.yellow },
        color_info = { fg = colors.cyan },
     },
  }

  -- Insert mid section. You can make any number of sections in neovim :)
  -- for lualine it's any number greater then 2
  ins_left {
     function()
        return '%='
     end,
  }

  ins_left {
     -- Lsp server name .
     function()
        local msg = 'No Active Lsp'
        local buf_ft = vim.api.nvim_buf_get_option(0, 'filetype')
        local clients = vim.lsp.get_active_clients()
        if next(clients) == nil then
           return msg
        end
        for _, client in ipairs(clients) do
           local filetypes = client.config.filetypes
           if filetypes and vim.fn.index(filetypes, buf_ft) ~= -1 then
              return client.name
           end
        end
        return msg
     end,
     icon = ' LSP:',
     color = { fg = '#ffffff', gui = 'bold' },
  }

  -- Add components to right sections
  ins_right {
     'o:encoding', -- option component same as &encoding in viml
     fmt = string.upper, -- I'm not sure why it's upper case either ;)
     cond = conditions.hide_in_width,
     color = { fg = colors.green, gui = 'bold' },
  }

  ins_right {
     'fileformat',
     fmt = string.upper,
     icons_enabled = false, -- I think icons are cool but Eviline doesn't have them. sigh
     color = { fg = colors.green, gui = 'bold' },
  }

  ins_right {
     'branch',
     icon = '',
     color = { fg = colors.violet, gui = 'bold' },
  }

  ins_right {
     'diff',
     -- Is it me or the symbol for modified us really weird
     symbols = { added = ' ', modified = '󰝤 ', removed = ' ' },
     diff_color = {
        added = { fg = colors.green },
        modified = { fg = colors.orange },
        removed = { fg = colors.red },
     },
     cond = conditions.hide_in_width,
  }

  ins_right {
     function()
        return '▊'
     end,
     color = { fg = colors.blue },
     padding = { left = 1 },
  }

  -- Now don't forget to initialize lualine
  lualine.setup(config)
#+end_src

** Mason
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/mason.lua
  require("mason").setup({
     ui = {
        icons = {
           package_installed = "✓",
           package_pending = "➜",
           package_uninstalled = "✗"
        }
     }
  })
#+end_src

** TODO Mini
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/mini.lua

#+end_src

** Nvim tree
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/nvim_tree.lua
  require("nvim-tree").setup({
     renderer = {
        indent_width = 1,
        indent_markers = {
           enable = true,
           icons = {
              corner = ' ',--'└',
              edge = '│',-- '│',
              item = ' ',--'│',
              none = '│'
           }
        }
     },
     filters = {
        git_ignored = false
     }
  })
#+end_src

** TODO Telescope
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/telescope.lua
  -- Настраиваем комбинации под разные функции
  local builtin = require('telescope.builtin')

  -- Работа с файлами и буфферами
  vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
  vim.keymap.set('n', '<leader>ft', builtin.live_grep, {})
  vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
  vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})

  -- Работа с Git
  vim.keymap.set('n', '<leader>gb', builtin.git_branches, {})
  vim.keymap.set('n', '<leader>gc', builtin.git_commits, {})
  vim.keymap.set('n', '<leader>gs', builtin.git_status, {})

  -- Выбор цветовой схемы
  vim.keymap.set('n', '<leader>cs', builtin.colorscheme, {})
#+end_src

** Themes
*** (Перенесено) Sonokai
begin_src lua :tangle ~/.config/nvim/lua/plugins/sonokai.lua
  require("sonokai").setup({
     vim.g.sonokai_style = 'espresso',
     vim.g.sonokai_transparent_background = 1,
     vim.g.sonokai_enable_italic = true,
     vim.cmd.colorscheme('sonokai')
  })
end_src

** Treesitter
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/treesitter.lua
  require'nvim-treesitter.configs'.setup {
     ensure_installed = {
        "bash",
        "css",
        "dockerfile",
        "html",
        "javascript",
        "json",
        "json5",
        "lua",
        "python",
        "vim",
        "yaml",
        "c",
        "go",
        "rust",
        "haskell",
     },

     sync_install = false,
     auto_install = true,
     highlight = {
        enable = true,
     },
     indent = {
        enable = true,
     }
  }
#+end_src

** Which key
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/which_key.lua
  local wk = require("which-key")

  wk.add({

        { "<leader>c", group = "Color Schemes" },
        { "<leader>cs", desc = "Open" },

        { "<leader>e", desc = "Open Diagnostic Window" },

        { "<leader>f", group = "Find" },
        { "<leader>fb", desc = "Find Buffer" },
        { "<leader>ff", desc = "Find File" },
        { "<leader>fh", desc = "Find Help" },
        { "<leader>ft", desc = "Find Text" },

        { "<leader>g", group = "Git" },
        { "<leader>gb", desc = "Open Branches" },
        { "<leader>gc", desc = "Open Commits" },
        { "<leader>gs", desc = "Open Status" },

        { "<leader>l", group = "LSP" },
        { "<leader>lD", desc = "Declaration" },
        { "<leader>ld", desc = "Definition" },
        { "<leader>lk", desc = "Hover" },
      
        { "<leader>n", group = "TodoList" },
        { "<leader>nl", desc = "Open List" },

        { "<leader>r", desc = "Ruff" },

        { "<leader>s", desc = "Open Terminal" },

        { "<leader>t", group = "NvimTree" },
        { "<leader>tf", desc = "Tree Focus" },
        { "<leader>tt", desc = "Tree Toggle" },
  })
#+end_src
